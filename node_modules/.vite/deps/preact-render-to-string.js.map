{
  "version": 3,
  "sources": ["../../preact-render-to-string/src/util.js", "../../preact-render-to-string/src/index.js", "dep:preact-render-to-string"],
  "sourcesContent": ["// DOM properties that should NOT have \"px\" added when numeric\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i;\n\nconst ENCODED_ENTITIES = /[&<>\"]/;\n\nexport function encodeEntities(input) {\n\tconst s = String(input);\n\tif (!ENCODED_ENTITIES.test(s)) {\n\t\treturn s;\n\t}\n\treturn s\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n}\n\nexport let indent = (s, char) =>\n\tString(s).replace(/(\\n+)/g, '$1' + (char || '\\t'));\n\nexport let isLargeString = (s, length, ignoreLines) =>\n\tString(s).length > (length || 40) ||\n\t(!ignoreLines && String(s).indexOf('\\n') !== -1) ||\n\tString(s).indexOf('<') !== -1;\n\nconst JS_TO_CSS = {};\n\n// Convert an Object style to a CSSText string\nexport function styleObjToCss(s) {\n\tlet str = '';\n\tfor (let prop in s) {\n\t\tlet val = s[prop];\n\t\tif (val != null && val !== '') {\n\t\t\tif (str) str += ' ';\n\t\t\t// str += jsToCss(prop);\n\t\t\tstr +=\n\t\t\t\tprop[0] == '-'\n\t\t\t\t\t? prop\n\t\t\t\t\t: JS_TO_CSS[prop] ||\n\t\t\t\t\t  (JS_TO_CSS[prop] = prop.replace(/([A-Z])/g, '-$1').toLowerCase());\n\t\t\tstr += ': ';\n\t\t\tstr += val;\n\t\t\tif (typeof val === 'number' && IS_NON_DIMENSIONAL.test(prop) === false) {\n\t\t\t\tstr += 'px';\n\t\t\t}\n\t\t\tstr += ';';\n\t\t}\n\t}\n\treturn str || undefined;\n}\n\n/**\n * Copy all properties from `props` onto `obj`.\n * @param {object} obj Object onto which properties should be copied.\n * @param {object} props Object from which to copy properties.\n * @returns {object}\n * @private\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/**\n * Get flattened children from the children prop\n * @param {Array} accumulator\n * @param {any} children A `props.children` opaque object.\n * @returns {Array} accumulator\n * @private\n */\nexport function getChildren(accumulator, children) {\n\tif (Array.isArray(children)) {\n\t\tchildren.reduce(getChildren, accumulator);\n\t} else if (children != null && children !== false) {\n\t\taccumulator.push(children);\n\t}\n\treturn accumulator;\n}\n", "import {\n\tencodeEntities,\n\tindent,\n\tisLargeString,\n\tstyleObjToCss,\n\tassign,\n\tgetChildren\n} from './util';\nimport { options, Fragment } from 'preact';\n\n/** @typedef {import('preact').VNode} VNode */\n\nconst SHALLOW = { shallow: true };\n\n// components without names, kept as a hash for later comparison to return consistent UnnamedComponentXX names.\nconst UNNAMED = [];\n\nconst VOID_ELEMENTS =\n\t/^(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)$/;\n\nconst UNSAFE_NAME = /[\\s\\n\\\\/='\"\\0<>]/;\n\nfunction markAsDirty() {\n\tthis.__d = true;\n}\n\n/** Render Preact JSX + Components to an HTML string.\n *\t@name render\n *\t@function\n *\t@param {VNode} vnode\tJSX VNode to render.\n *\t@param {Object} [context={}]\tOptionally pass an initial context object through the render path.\n *\t@param {Object} [options={}]\tRendering options\n *\t@param {Boolean} [options.shallow=false]\tIf `true`, renders nested Components as HTML elements (`<Foo a=\"b\" />`).\n *\t@param {Boolean} [options.xml=false]\t\tIf `true`, uses self-closing tags for elements without children.\n *\t@param {Boolean} [options.pretty=false]\t\tIf `true`, adds whitespace for readability\n *\t@param {RegExp|undefined} [options.voidElements]       RegeEx that matches elements that are considered void (self-closing)\n */\nrenderToString.render = renderToString;\n\n/** Only render elements, leaving Components inline as `<ComponentName ... />`.\n *\tThis method is just a convenience alias for `render(vnode, context, { shallow:true })`\n *\t@name shallow\n *\t@function\n *\t@param {VNode} vnode\tJSX VNode to render.\n *\t@param {Object} [context={}]\tOptionally pass an initial context object through the render path.\n */\nlet shallowRender = (vnode, context) => renderToString(vnode, context, SHALLOW);\n\nconst EMPTY_ARR = [];\nfunction renderToString(vnode, context, opts) {\n\tcontext = context || {};\n\topts = opts || {};\n\n\t// Performance optimization: `renderToString` is synchronous and we\n\t// therefore don't execute any effects. To do that we pass an empty\n\t// array to `options._commit` (`__c`). But we can go one step further\n\t// and avoid a lot of dirty checks and allocations by setting\n\t// `options._skipEffects` (`__s`) too.\n\tconst previousSkipEffects = options.__s;\n\toptions.__s = true;\n\n\tconst res = _renderToString(vnode, context, opts);\n\n\t// options._commit, we don't schedule any effects in this library right now,\n\t// so we can pass an empty queue to this hook.\n\tif (options.__c) options.__c(vnode, EMPTY_ARR);\n\tEMPTY_ARR.length = 0;\n\toptions.__s = previousSkipEffects;\n\treturn res;\n}\n\n/** The default export is an alias of `render()`. */\nfunction _renderToString(vnode, context, opts, inner, isSvgMode, selectValue) {\n\tif (vnode == null || typeof vnode === 'boolean') {\n\t\treturn '';\n\t}\n\n\t// #text nodes\n\tif (typeof vnode !== 'object') {\n\t\treturn encodeEntities(vnode);\n\t}\n\n\tlet pretty = opts.pretty,\n\t\tindentChar = pretty && typeof pretty === 'string' ? pretty : '\\t';\n\n\tif (Array.isArray(vnode)) {\n\t\tlet rendered = '';\n\t\tfor (let i = 0; i < vnode.length; i++) {\n\t\t\tif (pretty && i > 0) rendered = rendered + '\\n';\n\t\t\trendered =\n\t\t\t\trendered +\n\t\t\t\t_renderToString(vnode[i], context, opts, inner, isSvgMode, selectValue);\n\t\t}\n\t\treturn rendered;\n\t}\n\n\tlet nodeName = vnode.type,\n\t\tprops = vnode.props,\n\t\tisComponent = false;\n\n\t// components\n\tif (typeof nodeName === 'function') {\n\t\tisComponent = true;\n\t\tif (opts.shallow && (inner || opts.renderRootComponent === false)) {\n\t\t\tnodeName = getComponentName(nodeName);\n\t\t} else if (nodeName === Fragment) {\n\t\t\tconst children = [];\n\t\t\tgetChildren(children, vnode.props.children);\n\t\t\treturn _renderToString(\n\t\t\t\tchildren,\n\t\t\t\tcontext,\n\t\t\t\topts,\n\t\t\t\topts.shallowHighOrder !== false,\n\t\t\t\tisSvgMode,\n\t\t\t\tselectValue\n\t\t\t);\n\t\t} else {\n\t\t\tlet rendered;\n\n\t\t\tlet c = (vnode.__c = {\n\t\t\t\t__v: vnode,\n\t\t\t\tcontext,\n\t\t\t\tprops: vnode.props,\n\t\t\t\t// silently drop state updates\n\t\t\t\tsetState: markAsDirty,\n\t\t\t\tforceUpdate: markAsDirty,\n\t\t\t\t__d: true,\n\t\t\t\t// hooks\n\t\t\t\t__h: []\n\t\t\t});\n\n\t\t\t// options._diff\n\t\t\tif (options.__b) options.__b(vnode);\n\n\t\t\t// options._render\n\t\t\tlet renderHook = options.__r;\n\n\t\t\tif (\n\t\t\t\t!nodeName.prototype ||\n\t\t\t\ttypeof nodeName.prototype.render !== 'function'\n\t\t\t) {\n\t\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t\t// the context value as `this.context` just for this component.\n\t\t\t\tlet cxType = nodeName.contextType;\n\t\t\t\tlet provider = cxType && context[cxType.__c];\n\t\t\t\tlet cctx =\n\t\t\t\t\tcxType != null\n\t\t\t\t\t\t? provider\n\t\t\t\t\t\t\t? provider.props.value\n\t\t\t\t\t\t\t: cxType.__\n\t\t\t\t\t\t: context;\n\n\t\t\t\t// If a hook invokes setState() to invalidate the component during rendering,\n\t\t\t\t// re-render it up to 25 times to allow \"settling\" of memoized states.\n\t\t\t\t// Note:\n\t\t\t\t//   This will need to be updated for Preact 11 to use internal.flags rather than component._dirty:\n\t\t\t\t//   https://github.com/preactjs/preact/blob/d4ca6fdb19bc715e49fd144e69f7296b2f4daa40/src/diff/component.js#L35-L44\n\t\t\t\tlet count = 0;\n\t\t\t\twhile (c.__d && count++ < 25) {\n\t\t\t\t\tc.__d = false;\n\n\t\t\t\t\tif (renderHook) renderHook(vnode);\n\n\t\t\t\t\t// stateless functional components\n\t\t\t\t\trendered = nodeName.call(vnode.__c, props, cctx);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// class-based components\n\t\t\t\tlet cxType = nodeName.contextType;\n\t\t\t\tlet provider = cxType && context[cxType.__c];\n\t\t\t\tlet cctx =\n\t\t\t\t\tcxType != null\n\t\t\t\t\t\t? provider\n\t\t\t\t\t\t\t? provider.props.value\n\t\t\t\t\t\t\t: cxType.__\n\t\t\t\t\t\t: context;\n\n\t\t\t\t// c = new nodeName(props, context);\n\t\t\t\tc = vnode.__c = new nodeName(props, cctx);\n\t\t\t\tc.__v = vnode;\n\t\t\t\t// turn off stateful re-rendering:\n\t\t\t\tc._dirty = c.__d = true;\n\t\t\t\tc.props = props;\n\t\t\t\tif (c.state == null) c.state = {};\n\n\t\t\t\tif (c._nextState == null && c.__s == null) {\n\t\t\t\t\tc._nextState = c.__s = c.state;\n\t\t\t\t}\n\n\t\t\t\tc.context = cctx;\n\t\t\t\tif (nodeName.getDerivedStateFromProps)\n\t\t\t\t\tc.state = assign(\n\t\t\t\t\t\tassign({}, c.state),\n\t\t\t\t\t\tnodeName.getDerivedStateFromProps(c.props, c.state)\n\t\t\t\t\t);\n\t\t\t\telse if (c.componentWillMount) {\n\t\t\t\t\tc.componentWillMount();\n\n\t\t\t\t\t// If the user called setState in cWM we need to flush pending,\n\t\t\t\t\t// state updates. This is the same behaviour in React.\n\t\t\t\t\tc.state =\n\t\t\t\t\t\tc._nextState !== c.state\n\t\t\t\t\t\t\t? c._nextState\n\t\t\t\t\t\t\t: c.__s !== c.state\n\t\t\t\t\t\t\t? c.__s\n\t\t\t\t\t\t\t: c.state;\n\t\t\t\t}\n\n\t\t\t\tif (renderHook) renderHook(vnode);\n\n\t\t\t\trendered = c.render(c.props, c.state, c.context);\n\t\t\t}\n\n\t\t\tif (c.getChildContext) {\n\t\t\t\tcontext = assign(assign({}, context), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (options.diffed) options.diffed(vnode);\n\t\t\treturn _renderToString(\n\t\t\t\trendered,\n\t\t\t\tcontext,\n\t\t\t\topts,\n\t\t\t\topts.shallowHighOrder !== false,\n\t\t\t\tisSvgMode,\n\t\t\t\tselectValue\n\t\t\t);\n\t\t}\n\t}\n\n\t// render JSX to HTML\n\tlet s = '<' + nodeName,\n\t\tpropChildren,\n\t\thtml;\n\n\tif (props) {\n\t\tlet attrs = Object.keys(props);\n\n\t\t// allow sorting lexicographically for more determinism (useful for tests, such as via preact-jsx-chai)\n\t\tif (opts && opts.sortAttributes === true) attrs.sort();\n\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tlet name = attrs[i],\n\t\t\t\tv = props[name];\n\t\t\tif (name === 'children') {\n\t\t\t\tpropChildren = v;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (UNSAFE_NAME.test(name)) continue;\n\n\t\t\tif (\n\t\t\t\t!(opts && opts.allAttributes) &&\n\t\t\t\t(name === 'key' ||\n\t\t\t\t\tname === 'ref' ||\n\t\t\t\t\tname === '__self' ||\n\t\t\t\t\tname === '__source')\n\t\t\t)\n\t\t\t\tcontinue;\n\n\t\t\tif (name === 'defaultValue') {\n\t\t\t\tname = 'value';\n\t\t\t} else if (name === 'defaultChecked') {\n\t\t\t\tname = 'checked';\n\t\t\t} else if (name === 'defaultSelected') {\n\t\t\t\tname = 'selected';\n\t\t\t} else if (name === 'className') {\n\t\t\t\tif (typeof props.class !== 'undefined') continue;\n\t\t\t\tname = 'class';\n\t\t\t} else if (isSvgMode && /^xlink:?./.test(name)) {\n\t\t\t\tname = name.toLowerCase().replace(/^xlink:?/, 'xlink:');\n\t\t\t}\n\n\t\t\tif (name === 'htmlFor') {\n\t\t\t\tif (props.for) continue;\n\t\t\t\tname = 'for';\n\t\t\t}\n\n\t\t\tif (name === 'style' && v && typeof v === 'object') {\n\t\t\t\tv = styleObjToCss(v);\n\t\t\t}\n\n\t\t\t// always use string values instead of booleans for aria attributes\n\t\t\t// also see https://github.com/preactjs/preact/pull/2347/files\n\t\t\tif (name[0] === 'a' && name['1'] === 'r' && typeof v === 'boolean') {\n\t\t\t\tv = String(v);\n\t\t\t}\n\n\t\t\tlet hooked =\n\t\t\t\topts.attributeHook &&\n\t\t\t\topts.attributeHook(name, v, context, opts, isComponent);\n\t\t\tif (hooked || hooked === '') {\n\t\t\t\ts = s + hooked;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (name === 'dangerouslySetInnerHTML') {\n\t\t\t\thtml = v && v.__html;\n\t\t\t} else if (nodeName === 'textarea' && name === 'value') {\n\t\t\t\t// <textarea value=\"a&b\"> --> <textarea>a&amp;b</textarea>\n\t\t\t\tpropChildren = v;\n\t\t\t} else if ((v || v === 0 || v === '') && typeof v !== 'function') {\n\t\t\t\tif (v === true || v === '') {\n\t\t\t\t\tv = name;\n\t\t\t\t\t// in non-xml mode, allow boolean attributes\n\t\t\t\t\tif (!opts || !opts.xml) {\n\t\t\t\t\t\ts = s + ' ' + name;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (name === 'value') {\n\t\t\t\t\tif (nodeName === 'select') {\n\t\t\t\t\t\tselectValue = v;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t// If we're looking at an <option> and it's the currently selected one\n\t\t\t\t\t\tnodeName === 'option' &&\n\t\t\t\t\t\tselectValue == v &&\n\t\t\t\t\t\t// and the <option> doesn't already have a selected attribute on it\n\t\t\t\t\t\ttypeof props.selected === 'undefined'\n\t\t\t\t\t) {\n\t\t\t\t\t\ts = s + ` selected`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts = s + ` ${name}=\"${encodeEntities(v)}\"`;\n\t\t\t}\n\t\t}\n\t}\n\n\t// account for >1 multiline attribute\n\tif (pretty) {\n\t\tlet sub = s.replace(/\\n\\s*/, ' ');\n\t\tif (sub !== s && !~sub.indexOf('\\n')) s = sub;\n\t\telse if (pretty && ~s.indexOf('\\n')) s = s + '\\n';\n\t}\n\n\ts = s + '>';\n\n\tif (UNSAFE_NAME.test(nodeName))\n\t\tthrow new Error(`${nodeName} is not a valid HTML tag name in ${s}`);\n\n\tlet isVoid =\n\t\tVOID_ELEMENTS.test(nodeName) ||\n\t\t(opts.voidElements && opts.voidElements.test(nodeName));\n\tlet pieces = [];\n\n\tlet children;\n\tif (html) {\n\t\t// if multiline, indent.\n\t\tif (pretty && isLargeString(html)) {\n\t\t\thtml = '\\n' + indentChar + indent(html, indentChar);\n\t\t}\n\t\ts = s + html;\n\t} else if (\n\t\tpropChildren != null &&\n\t\tgetChildren((children = []), propChildren).length\n\t) {\n\t\tlet hasLarge = pretty && ~s.indexOf('\\n');\n\t\tlet lastWasText = false;\n\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tlet child = children[i];\n\n\t\t\tif (child != null && child !== false) {\n\t\t\t\tlet childSvgMode =\n\t\t\t\t\t\tnodeName === 'svg'\n\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t: nodeName === 'foreignObject'\n\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t: isSvgMode,\n\t\t\t\t\tret = _renderToString(\n\t\t\t\t\t\tchild,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\topts,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tchildSvgMode,\n\t\t\t\t\t\tselectValue\n\t\t\t\t\t);\n\n\t\t\t\tif (pretty && !hasLarge && isLargeString(ret)) hasLarge = true;\n\n\t\t\t\t// Skip if we received an empty string\n\t\t\t\tif (ret) {\n\t\t\t\t\tif (pretty) {\n\t\t\t\t\t\tlet isText = ret.length > 0 && ret[0] != '<';\n\n\t\t\t\t\t\t// We merge adjacent text nodes, otherwise each piece would be printed\n\t\t\t\t\t\t// on a new line.\n\t\t\t\t\t\tif (lastWasText && isText) {\n\t\t\t\t\t\t\tpieces[pieces.length - 1] += ret;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpieces.push(ret);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastWasText = isText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpieces.push(ret);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (pretty && hasLarge) {\n\t\t\tfor (let i = pieces.length; i--; ) {\n\t\t\t\tpieces[i] = '\\n' + indentChar + indent(pieces[i], indentChar);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (pieces.length || html) {\n\t\ts = s + pieces.join('');\n\t} else if (opts && opts.xml) {\n\t\treturn s.substring(0, s.length - 1) + ' />';\n\t}\n\n\tif (isVoid && !children && !html) {\n\t\ts = s.replace(/>$/, ' />');\n\t} else {\n\t\tif (pretty && ~s.indexOf('\\n')) s = s + '\\n';\n\t\ts = s + `</${nodeName}>`;\n\t}\n\n\treturn s;\n}\n\nfunction getComponentName(component) {\n\treturn (\n\t\tcomponent.displayName ||\n\t\t(component !== Function && component.name) ||\n\t\tgetFallbackComponentName(component)\n\t);\n}\n\nfunction getFallbackComponentName(component) {\n\tlet str = Function.prototype.toString.call(component),\n\t\tname = (str.match(/^\\s*function\\s+([^( ]+)/) || '')[1];\n\tif (!name) {\n\t\t// search for an existing indexed name for the given component:\n\t\tlet index = -1;\n\t\tfor (let i = UNNAMED.length; i--; ) {\n\t\t\tif (UNNAMED[i] === component) {\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// not found, create a new indexed name:\n\t\tif (index < 0) {\n\t\t\tindex = UNNAMED.push(component) - 1;\n\t\t}\n\t\tname = `UnnamedComponent${index}`;\n\t}\n\treturn name;\n}\nrenderToString.shallowRender = shallowRender;\n\nexport default renderToString;\n\nexport {\n\trenderToString as render,\n\trenderToString as renderToStaticMarkup,\n\trenderToString,\n\tshallowRender\n};\n", "import d from \"./node_modules/preact-render-to-string/dist/index.module.js\";export default d;\nexport * from \"./node_modules/preact-render-to-string/dist/index.module.js\""],
  "mappings": ";;;;;;IACaA,IAAqB;IAE5BC,IAAmB;AAAA,SAETC,EAAeC,GAAAA;AAC9B,MAAMC,IAAIC,OAAOF,CAAAA;AACjB,SAAKF,EAAiBK,KAAKF,CAAAA,IAGpBA,EACLG,QAAQ,MAAM,OAAA,EACdA,QAAQ,MAAM,MAAA,EACdA,QAAQ,MAAM,MAAA,EACdA,QAAQ,MAAM,QAAA,IANRH;AAAAA;AAAAA,IASEI,IAAS,SAACJ,GAAGK,GAAAA;AAAAA,SACvBJ,OAAOD,CAAAA,EAAGG,QAAQ,UAAU,QAAQE,KAAQ,IAAA;AAAA;AAVpCL,IAYEM,IAAgB,SAACN,GAAGO,GAAQC,IAAAA;AAAAA,SACtCP,OAAOD,CAAAA,EAAGO,UAAUA,KAAU,OAAA,CAC5BC,MAAAA,OAAeP,OAAOD,CAAAA,EAAGS,QAAQ,IAAA,KAAA,OACnCR,OAAOD,CAAAA,EAAGS,QAAQ,GAAA;AAAA;AAfVT,IAiBHU,KAAY,CAAA;AAAA,SAGFC,EAAcX,GAAAA;AAC7B,MAAIY,IAAM;AACV,WAASC,MAAQb,GAAG;AACnB,QAAIc,KAAMd,EAAEa;AACD,YAAPC,MAAuB,OAARA,OACdF,MAAKA,KAAO,MAEhBA,KACY,OAAXC,GAAK,KACFA,KACAH,GAAUG,QACTH,GAAUG,MAAQA,GAAKV,QAAQ,YAAY,KAAA,EAAOY,YAAAA,IACvDH,KAAO,MACPA,KAAOE,IACY,YAAA,OAARA,MAAAA,UAAoBlB,EAAmBM,KAAKW,EAAAA,MACtDD,KAAO,OAERA,KAAO;EAAA;AAGT,SAAOA,KAAAA;AAAOI;AAAAA,SAUCC,EAAOC,GAAKC,GAAAA;AAC3B,WAASC,MAAKD;AAAOD,MAAIE,MAAKD,EAAMC;AACpC,SAAOF;AAAAA;AAAAA,SAUQG,EAAYC,GAAaC,GAAAA;AAMxC,SALIC,MAAMC,QAAQF,CAAAA,IACjBA,EAASG,OAAOL,GAAaC,CAAAA,IACP,QAAZC,KAAAA,UAAoBA,KAC9BD,EAAYK,KAAKJ,CAAAA,GAEXD;AAAAA;AChER,IAAMM,IAAU,EAAEC,SAAAA,KAAS;AAA3B,IAGMC,KAAU,CAAA;AAHhB,IAKMC,IACL;AAND,IAQMC,IAAc;AAEpB,SAASC,IAAAA;AACRC,OAAKC,MAAAA;AAAM;AAcZC,EAAeC,SAASD;AASpBE,IAAAA,IAAgB,SAACC,GAAOC,GAAAA;AAAAA,SAAYJ,EAAeG,GAAOC,GAASZ,CAAAA;AAAAA;AAAnEU,IAEEG,IAAY,CAAA;AAClB,SAASL,EAAeG,GAAOC,IAASE,IAAAA;AACvCF,EAAAA,KAAUA,MAAW,CAAA,GACrBE,KAAOA,MAAQ,CAAA;AAOf,MAAMC,KAAsBC,EAAQC;AACpCD,IAAQC,MAAAA;AAER,MAAMC,KAAMC,EAAgBR,GAAOC,IAASE,EAAAA;AAO5C,SAHIE,EAAQI,OAAKJ,EAAQI,IAAIT,GAAOE,CAAAA,GACpCA,EAAUlC,SAAS,GACnBqC,EAAQC,MAAMF,IACPG;AAAAA;AAIR,SAASC,EAAgBR,IAAOC,IAASE,IAAMO,IAAOC,IAAWC,IAAAA;AAChE,MAAa,QAATZ,MAAkC,aAAA,OAAVA;AAC3B,WAAO;AAIR,MAAqB,YAAA,OAAVA;AACV,WAAOzC,EAAeyC,EAAAA;AAGvB,MAAIa,KAASV,GAAKU,QACjBC,IAAaD,MAA4B,YAAA,OAAXA,KAAsBA,KAAS;AAE9D,MAAI5B,MAAMC,QAAQc,EAAAA,GAAQ;AAEzB,aADIe,IAAW,IACNlC,IAAI,GAAGA,IAAImB,GAAMhC,QAAQa;AAC7BgC,MAAAA,MAAUhC,IAAI,MAAGkC,KAAsB,OAC3CA,KAECP,EAAgBR,GAAMnB,IAAIoB,IAASE,IAAMO,IAAOC,IAAWC,EAAAA;AAE7D,WAAOG;EAAAA;AAGR,MAwUyBC,GAxUrBC,IAAWjB,GAAMkB,MACpBtC,IAAQoB,GAAMpB,OACduC,IAAAA;AAGD,MAAwB,cAAA,OAAbF,GAAyB;AAEnC,QADAE,IAAAA,MAAc,CACVhB,GAAKb,WAAAA,CAAYoB,MAAAA,UAASP,GAAKiB,qBAAAA;AAAAA,UAExBH,MAAaI,GAAU;AACjC,YAAMrC,IAAW,CAAA;AAEjB,eADAF,EAAYE,GAAUgB,GAAMpB,MAAMI,QAAAA,GAC3BwB,EACNxB,GACAiB,IACAE,IAAAA,UACAA,GAAKmB,kBACLX,IACAC,EAAAA;MAAAA;AAGD,UAAIG,GAEAQ,IAAKvB,GAAMS,MAAM,EACpBe,KAAKxB,IACLC,SAAAA,IACArB,OAAOoB,GAAMpB,OAEb6C,UAAU/B,GACVgC,aAAahC,GACbE,KAAAA,MAEA+B,KAAK,CAAA,EAAA;AAIFtB,QAAQuB,OAAKvB,EAAQuB,IAAI5B,EAAAA;AAG7B,UAAI6B,IAAaxB,EAAQyB;AAEzB,UACEb,EAASc,aAC2B,cAAA,OAA9Bd,EAASc,UAAUjC,QA2BpB;AAEN,YAAIkC,IAASf,EAASgB,aAClBC,IAAWF,KAAU/B,GAAQ+B,EAAOvB,MACpC0B,IACO,QAAVH,IACGE,IACCA,EAAStD,MAAMwD,QACfJ,EAAOK,KACRpC;AAAAA,SAGJsB,IAAIvB,GAAMS,MAAM,IAAIQ,EAASrC,GAAOuD,CAAAA,GAClCX,MAAMxB,IAERuB,EAAEe,SAASf,EAAE3B,MAAAA,MACb2B,EAAE3C,QAAQA,GACK,QAAX2C,EAAEgB,UAAehB,EAAEgB,QAAQ,CAAA,IAEX,QAAhBhB,EAAEiB,cAA+B,QAATjB,EAAEjB,QAC7BiB,EAAEiB,aAAajB,EAAEjB,MAAMiB,EAAEgB,QAG1BhB,EAAEtB,UAAUkC,GACRlB,EAASwB,2BACZlB,EAAEgB,QAAQ7D,EACTA,EAAO,CAAA,GAAI6C,EAAEgB,KAAAA,GACbtB,EAASwB,yBAAyBlB,EAAE3C,OAAO2C,EAAEgB,KAAAA,CAAAA,IAEtChB,EAAEmB,uBACVnB,EAAEmB,mBAAAA,GAIFnB,EAAEgB,QACDhB,EAAEiB,eAAejB,EAAEgB,QAChBhB,EAAEiB,aACFjB,EAAEjB,QAAQiB,EAAEgB,QACZhB,EAAEjB,MACFiB,EAAEgB,QAGHV,KAAYA,EAAW7B,EAAAA,GAE3Be,IAAWQ,EAAEzB,OAAOyB,EAAE3C,OAAO2C,EAAEgB,OAAOhB,EAAEtB,OAAAA;MAAAA;AApDxC,iBAfI+B,IAASf,EAASgB,aAClBC,IAAWF,KAAU/B,GAAQ+B,EAAOvB,MACpC0B,IACO,QAAVH,IACGE,IACCA,EAAStD,MAAMwD,QACfJ,EAAOK,KACRpC,IAOA0C,IAAQ,GACLpB,EAAE3B,OAAO+C,MAAU;AACzBpB,YAAE3B,MAAAA,OAEEiC,KAAYA,EAAW7B,EAAAA,GAG3Be,IAAWE,EAAS2B,KAAK5C,GAAMS,KAAK7B,GAAOuD,CAAAA;AAsD7C,aALIZ,EAAEsB,oBACL5C,KAAUvB,EAAOA,EAAO,CAAA,GAAIuB,EAAAA,GAAUsB,EAAEsB,gBAAAA,CAAAA,IAGrCxC,EAAQyC,UAAQzC,EAAQyC,OAAO9C,EAAAA,GAC5BQ,EACNO,GACAd,IACAE,IAAAA,UACAA,GAAKmB,kBACLX,IACAC,EAAAA;IAAAA;AAxHDK,SAgUuBD,IAhUKC,GAkUnB8B,eACT/B,MAAcgC,YAAYhC,EAAUiC,QAKvC,SAAkCjC,GAAAA;AACjC,UACCiC,KADSD,SAASjB,UAAUmB,SAASN,KAAK5B,CAAAA,EAC9BmC,MAAM,yBAAA,KAA8B,IAAI;AACrD,UAAA,CAAKF,GAAM;AAGV,iBADIG,KAAAA,IACKvE,KAAIU,GAAQvB,QAAQa;AAC5B,cAAIU,GAAQV,QAAOmC,GAAW;AAC7BoC,YAAAA,KAAQvE;AACR;UAAA;AAIEuE,QAAAA,KAAQ,MACXA,KAAQ7D,GAAQH,KAAK4B,CAAAA,IAAa,IAEnCiC,IAAAA,qBAA0BG;MAAAA;AAE3B,aAAOH;IAAAA,EAtBmBjC,CAAAA;EAAAA;AAtM1B,MACCqC,GACAC,GAFG7F,IAAI,MAAMwD;AAId,MAAIrC,GAAO;AACV,QAAI2E,IAAQC,OAAOC,KAAK7E,CAAAA;AAGpBuB,IAAAA,MAAAA,SAAQA,GAAKuD,kBAAyBH,EAAMI,KAAAA;AAEhD,aAAS9E,IAAI,GAAGA,IAAI0E,EAAMvF,QAAQa,KAAK;AACtC,UAAIoE,IAAOM,EAAM1E,IAChB+E,IAAIhF,EAAMqE;AACX,UAAa,eAATA,GAAAA;AAKJ,YAAA,CAAIxD,EAAY9B,KAAKsF,CAAAA,MAGlB9C,MAAQA,GAAK0D,iBACL,UAATZ,KACS,UAATA,KACS,aAATA,KACS,eAATA,IALF;AASA,cAAa,mBAATA;AACHA,gBAAO;mBACY,qBAATA;AACVA,gBAAO;mBACY,sBAATA;AACVA,gBAAO;mBACY,gBAATA,GAAsB;AAChC,gBAAA,WAAWrE,EAAAA;AAA6B;AACxCqE,gBAAO;UAAA;AACGtC,YAAAA,MAAa,YAAYhD,KAAKsF,CAAAA,MACxCA,IAAOA,EAAKzE,YAAAA,EAAcZ,QAAQ,YAAY,QAAA;AAG/C,cAAa,cAATqF,GAAoB;AACvB,gBAAIrE,EAAAA;AAAW;AACfqE,gBAAO;UAAA;AAGK,sBAATA,KAAoBW,KAAkB,YAAA,OAANA,MACnCA,IAAIxF,EAAcwF,CAAAA,IAKH,QAAZX,EAAK,MAA4B,QAAdA,EAAK,MAA6B,aAAA,OAANW,MAClDA,IAAIlG,OAAOkG,CAAAA;AAGZ,cAAIE,IACH3D,GAAK4D,iBACL5D,GAAK4D,cAAcd,GAAMW,GAAG3D,IAASE,IAAMgB,CAAAA;AAC5C,cAAI2C,KAAqB,OAAXA;AACbrG,iBAAQqG;mBAII,8BAATb;AACHK,gBAAOM,KAAKA,EAAEI;mBACS,eAAb/C,KAAoC,YAATgC;AAErCI,gBAAeO;oBACJA,KAAW,MAANA,KAAiB,OAANA,MAA0B,cAAA,OAANA,GAAkB;AACjE,gBAAA,EAAA,SAAIA,KAAoB,OAANA,MACjBA,IAAIX,GAEC9C,MAASA,GAAK8D,OAAK;AACvBxG,kBAAIA,IAAI,MAAMwF;AACd;YAAA;AAIF,gBAAa,YAATA,GAAkB;AACrB,kBAAiB,aAAbhC,GAAuB;AAC1BL,gBAAAA,KAAcgD;AACd;cAAA;AAGa,2BAAb3C,KACAL,MAAegD,KAAAA,WAERhF,EAAMsF,aAEbzG,KAAAA;YAAAA;AAGFA,gBAAIA,IAAAA,MAAQwF,IAAAA,OAAS1F,EAAeqG,CAAAA,IAAAA;UAAAA;QAAAA;MAAAA;AAhFpCP,YAAeO;IAAAA;EAAAA;AAsFlB,MAAI/C,IAAQ;AACX,QAAIsD,IAAM1G,EAAEG,QAAQ,SAAS,GAAA;AACzBuG,UAAQ1G,KAAAA,CAAO0G,EAAIjG,QAAQ,IAAA,IACtB2C,MAAAA,CAAWpD,EAAES,QAAQ,IAAA,MAAOT,KAAQ,QADPA,IAAI0G;EAAAA;AAM3C,MAFA1G,KAAQ,KAEJgC,EAAY9B,KAAKsD,CAAAA;AACpB,UAAA,IAAUmD,MAASnD,IAAAA,sCAA4CxD,CAAAA;AAEhE,MAKIuB,GALAqF,IACH7E,EAAc7B,KAAKsD,CAAAA,KAClBd,GAAKmE,gBAAgBnE,GAAKmE,aAAa3G,KAAKsD,CAAAA,GAC1CsD,IAAS,CAAA;AAGb,MAAIjB;AAECzC,IAAAA,MAAU9C,EAAcuF,CAAAA,MAC3BA,IAAO,OAAOxC,IAAajD,EAAOyF,GAAMxC,CAAAA,IAEzCrD,KAAQ6F;WAEQ,QAAhBD,KACAvE,EAAaE,IAAW,CAAA,GAAKqE,CAAAA,EAAcrF,QAC1C;AAID,aAHIwG,IAAW3D,MAAAA,CAAWpD,EAAES,QAAQ,IAAA,GAChCuG,IAAAA,OAEK5F,IAAI,GAAGA,IAAIG,EAAShB,QAAQa,KAAK;AACzC,UAAI6F,IAAQ1F,EAASH;AAErB,UAAa,QAAT6F,KAAAA,UAAiBA,GAAiB;AACrC,YAMCC,KAAMnE,EACLkE,GACAzE,IACAE,IAAAA,MARa,UAAbc,KAEgB,oBAAbA,KAEAN,IAOHC,EAAAA;AAMF,YAHIC,MAAAA,CAAW2D,KAAYzG,EAAc4G,EAAAA,MAAMH,IAAAA,OAG3CG;AACH,cAAI9D,IAAQ;AACX,gBAAI+D,KAASD,GAAI3G,SAAS,KAAe,OAAV2G,GAAI;AAI/BF,iBAAeG,KAClBL,EAAOA,EAAOvG,SAAS,MAAM2G,KAE7BJ,EAAOnF,KAAKuF,EAAAA,GAGbF,IAAcG;UAAAA;AAEdL,cAAOnF,KAAKuF,EAAAA;MAAAA;IAAAA;AAKhB,QAAI9D,MAAU2D;AACb,eAAS3F,KAAI0F,EAAOvG,QAAQa;AAC3B0F,UAAO1F,MAAK,OAAOiC,IAAajD,EAAO0G,EAAO1F,KAAIiC,CAAAA;EAAAA;AAKrD,MAAIyD,EAAOvG,UAAUsF;AACpB7F,SAAQ8G,EAAOM,KAAK,EAAA;WACV1E,MAAQA,GAAK8D;AACvB,WAAOxG,EAAEqH,UAAU,GAAGrH,EAAEO,SAAS,CAAA,IAAK;AAUvC,SAAA,CAPIqG,KAAWrF,KAAasE,KAGvBzC,MAAAA,CAAWpD,EAAES,QAAQ,IAAA,MAAOT,KAAQ,OACxCA,IAAIA,IAAAA,OAASwD,IAAAA,OAHbxD,IAAIA,EAAEG,QAAQ,MAAM,KAAA,GAMdH;AAAAA;AA+BRoC,EAAeE,gBAAgBA;AAAAA,IAAAA,uBAAAA;;;ACpc6C,IAAO,kCAAQ;",
  "names": ["IS_NON_DIMENSIONAL", "ENCODED_ENTITIES", "encodeEntities", "input", "s", "String", "test", "replace", "indent", "char", "isLargeString", "length", "ignoreLines", "indexOf", "JS_TO_CSS", "styleObjToCss", "str", "prop", "val", "toLowerCase", "undefined", "assign", "obj", "props", "i", "getChildren", "accumulator", "children", "Array", "isArray", "reduce", "push", "SHALLOW", "shallow", "UNNAMED", "VOID_ELEMENTS", "UNSAFE_NAME", "markAsDirty", "this", "__d", "renderToString", "render", "shallowRender", "vnode", "context", "EMPTY_ARR", "opts", "previousSkipEffects", "options", "__s", "res", "_renderToString", "__c", "inner", "isSvgMode", "selectValue", "pretty", "indentChar", "rendered", "component", "nodeName", "type", "isComponent", "renderRootComponent", "Fragment", "shallowHighOrder", "c", "__v", "setState", "forceUpdate", "__h", "__b", "renderHook", "__r", "prototype", "cxType", "contextType", "provider", "cctx", "value", "__", "_dirty", "state", "_nextState", "getDerivedStateFromProps", "componentWillMount", "count", "call", "getChildContext", "diffed", "displayName", "Function", "name", "toString", "match", "index", "propChildren", "html", "attrs", "Object", "keys", "sortAttributes", "sort", "v", "allAttributes", "hooked", "attributeHook", "__html", "xml", "selected", "sub", "Error", "isVoid", "voidElements", "pieces", "hasLarge", "lastWasText", "child", "ret", "isText", "join", "substring"]
}
